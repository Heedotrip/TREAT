## ========================================
## Spatial Transcriptomics Analysis Pipeline for NATURE Paper
## ========================================
## Author: [Seunghee Jeong]
## Date: [Current Date]
## Description: This script processes and analyzes spatial transcriptomics data
##              for treated (TREAT) and non-treated (NT) mouse brain samples.
## ========================================

#### Load necessary packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(BiocManager, ggplot2, dplyr, magrittr, hdf5r, Seurat, openxlsx, remotes)

# Install STUtility from GitHub if not already installed
if (!"STUtility" %in% installed.packages()[,"Package"]) {
  remotes::install_github("jbergenstrahle/STUtility", force = TRUE)
}
library(STutility)




#### Assemble spaceranger output files ----
path_data <- paste0(getwd(), "/data")
get_file_paths <- function(path, file_pattern) {
  Sys.glob(paths = paste0(path, file_pattern))
}

## TREAT
samples1 <- get_file_paths(path_data, "/spaceranger_output/TREAT/*/filtered_feature_bc_matrix.h5")
imgs1 <- get_file_paths(path_data, "/spaceranger_output/TREAT/*/spatial/tissue_hires_image.png")
spotfiles1 <- get_file_paths(path_data, "/spaceranger_output/TREAT/*/spatial/tissue_positions.csv")
json1 <- get_file_paths(path_data, "/spaceranger_output/TREAT/*/spatial/scalefactors_json.json")

## NT
samples2 <- get_file_paths(path_data, "/spaceranger_output/NT/*/filtered_feature_bc_matrix.h5")
imgs2 <- get_file_paths(path_data, "/spaceranger_output/NT/*/spatial/tissue_hires_image.png")
spotfiles2 <- get_file_paths(path_data, "/spaceranger_output/NT/*/spatial/tissue_positions.csv")
json2 <- get_file_paths(path_data, "/spaceranger_output/NT/*/spatial/scalefactors_json.json")

infoTable <- data.frame(samples = c(samples1, samples2),
                        imgs = c(imgs1, imgs2),
                        spotfiles = c(spotfiles1, spotfiles2),
                        json = c(json1, json2))
infoTable <- cbind(infoTable,
                   arrayID = c("V43U28-338_A1", "V43U28-338_D1",
                               "V43U27-081_A1", "V43U27-081_D1"))

curated_metadata <- openxlsx::read.xlsx(paste0(path_data, "/sheets/sample_metadata.xlsx"))
colnames(curated_metadata) <- c("sample", "condition", "arrayID", "spots_under_tissue",
                                "genes_detected", "fraction_spots_under_tissue",
                                "mean_reads_per_spot", "mean_reads_under_tissue_spot",
                                "median_genes_per_spot", "median_UMIs_per_spot",
                                "saturation", "reads_mapped_to_probe_set",
                                "reads_mapped_confidently_to_probe_set",
                                "reads_mapped_confidently_to_filtered_probe_set")
infoTable <- merge(infoTable, curated_metadata, by = "arrayID")
infoTable




#### Load mouse brain Visium data ----
dat <- STutility::InputFromTable(infotable = infoTable)
dat <- STutility::LoadImages(dat, time.resolve = FALSE)
STutility::ImagePlot(dat, method = "raster")

## Perform manual annotation
## Here, the spots were labeled into two major categories:
## "TREAT" and "NT"
## Note: The annoation was performed based on visual inspection of the H&E images
## and prior kowledge of the experimental design.
dat <- STutility::ManualAnnotation(dat)

## Save the data for reproducibility
save(dat, file = "dat.annot.RData")




## Make a cropped image with manually annotated regions ----
crop.geoms <- STutility::GetCropWindows(dat, keep.all.spots = TRUE)
crop.geoms

## Create a new column with the organoid labels
datSplit <- dat
datSplit$organoid <- factor(datSplit$labels,
                            levels = unique(datSplit$labels))
organoid_cols <- setNames(RColorBrewer::brewer.pal(n = 12, name = "Paired"),
                          nm = unique(datSplit$labels))

## Subset data to exclude non-labelled spots
datSplit <- STutility::SubsetSTData(datSplit,
                                    expression = labels %in% unique(datSplit$labels))

## Calculate crop geometries
pxs <- cbind(STutility::GetStaffli(datSplit)@meta.data[, c("pixel_x",
                                                           "pixel_y",
                                                           "sample")],
             selection = datSplit$organoid)
pxs_split <- split(pxs, pxs$sample)
pxs_split

pxs_split <- setNames(lapply(pxs_split, function(pxs) {
  dat.split <- lapply(unique(pxs$selection), function(cond) {
    subset_pxs <- pxs[pxs$selection == cond, ]
    m <- apply(subset_pxs[, 1:2], 2, range)
    centroid <- apply(m, 2, mean)
    hw <- apply(m, 2, function(x) round(diff(range(x))))
    offsets <- (centroid - c(max(hw[1])/2, max(hw[2])/2))
    geometry <- magick::geometry_area(width = max(hw[1]), height = max(hw[2]),
                                      x_off = offsets[1], y_off = offsets[2])
    return(geometry)
  })
}), nm = names(pxs_split))

## Assign crop geometries to crop.geoms
for (i in seq_along(pxs_split)) {
  for (j in seq_along(pxs_split[[i]])) {
    crop.geoms[[length(crop.geoms) + 1]]$geom <- pxs_split[[i]][[j]]
  }
}

## Save the data for reproducibility
save(crop.geoms, file = "crop.geoms.RData")

## H&E staining images with cropped windows
## Function to plot cropped windows on H&E images
plot_cropped_windows <- function(image_path, crop_geoms) {
  im <- magick::image_read(image_path) %>%
    imager::magick2cimg()
  corners_list <- list()
  for (i in 1:length(crop_geoms)) {
    split_data <- strsplit(crop_geoms[[i]]$geom, "x|\\+")
    corners_list[[i]] <- as.numeric(unlist(split_data))
  }
  corners <- do.call(rbind, corners_list)
  plot(im)
  rect(xleft = corners[, 3],
       ybottom = corners[, 4],
       xright = corners[, 3] + corners[, 1],
       ytop = corners[, 4] + corners[, 2])
}

## Confirm cropped section
plot_cropped_windows(STutility::GetStaffli(dat)@imgs[1], crop.geoms[c(1:2)])
plot_cropped_windows(STutility::GetStaffli(dat)@imgs[2], crop.geoms[c(3:4)])
plot_cropped_windows(STutility::GetStaffli(dat)@imgs[3], crop.geoms[c(5:6)])
plot_cropped_windows(STutility::GetStaffli(dat)@imgs[4], crop.geoms[c(7:8)])




## Filter and convert to Seurat v3 format ----
MIN_COUNT_RNA <- 500
MIN_FEATURE_RNA <- 500

dat.filtered <- dat %>%
  STutility::SubsetSTData(nCount_RNA >= MIN_COUNT_RNA & nFeature_RNA >= MIN_FEATURE_RNA)

dat.filtered3 <- dat.filtered
class(dat.filtered3[["RNA"]])
dat.filtered3[["RNA"]] <- CreateAssayObject(counts = dat.filtered3[["RNA"]]$counts)
class(dat.filtered3[["RNA"]])

## Crop images
dat.cropped <- STutility::CropImages(dat.filtered3,
                                     crop.geometry.list = crop.geoms,
                                     xdim = 500,
                                     time.resolve = TRUE,
                                     verbose = TRUE)

## Save the data for reproducibility
save(dat.cropped, file = "dat.cropped.RData")




#### Final summary ----
cat("Processing complete.\n")
cat("Initial spots:", ncol(dat), "\n")
cat("Filtered spots:", ncol(dat.filtered), "\n")
cat("Final cropped spots:", ncol(dat.cropped), "\n")
