#### ==========================================================================
#### Spatial Transcriptomics Analysis Pipeline
#### ==========================================================================
#### Author: [Seunghee Jeong]
#### Date: [2025.02.04]
#### Description: This script processes and analyzes spatial transcriptomics
####              data for treated (TREAT) and Vehicle mouse brain samples.
#### ==========================================================================


#### ==========================================================================
#### Load Necessary Packages
#### ==========================================================================
#### Install necessary package manager
pkg <- c("BiocManager", "ggplot2", "dplyr", "tibble", "grid", "gridBase",
         "magrittr", "viridis", "hdf5r", "patchwork", "ggpubr", "ggrastr",
         "ggbreak", "magick", "harmony", "ggsci", "rcartocolor", "corrplot",
         "scico", "glmGamPoi", "SeuratObject", "Seurat", "SeuratData", 
         "pheatmap", "cowplot", "tidytable", "stringr", "tidyr")
Biopkg <- c("clusterProfiler", "org.Mm.eg.db", "circlize", "ComplexHeatmap",
            "enrichplot", "scales", "ggsci", "ggtreeExtra", "RColorBrewer")

## Function to install and load packages
install_and_load <- function(package_list) {
  new_packages <- package_list[!(package_list %in% installed.packages()[,"Package"])]
  if (length(new_packages) > 0) {
    install.packages(new_packages)
  }
  sapply(package_list, require, character.only = TRUE)
}

install_and_load(c(pkg, Biopkg))

#### Install and load STUtility
if (!requireNamespace("STUtility", quietly = TRUE)) {
  remotes::install_github("jbergenstrahle/STUtility")
}
library(STutility)

#### ==========================================================================
#### Figure 5AB: Visualization of specific Clusters
#### ==========================================================================

#### Load spatial transcriptmoics dataset
print(getwd())
load("../../visium/dat.masked.RData")

#### [Figure 5A] FeaturePlot
#### FeaturePlot for peritumor clusters

plot_col <- c("#1F77B4", "#FF7F0E", "#AEC7E8FF", "#2CA02C", "#F6CF71",
              "#F89C74", "#9467BD", "#8C564B", "#FF9896FF", "#C5B0D5FF",
              "#C49C94FF", "#9EB9F3", "#F7B6D2FF", "#8BE0A4", "#E377C2",
              "#C7C7C7FF", "#66C5CC", "#D3B484", "#FE88B1", "#DBDB8DFF",
              "#9EDAE5FF", "#B3B3B3")

#### Assign colors to each Seurat clusters
cluster_col <- rep("gainsboro", length(unique(dat.masked@meta.data$seurat_clusters_pca)))
cluster_col[c(7)] <- plot_col[7] ## peritumor region 1 "#9467BD"
cluster_col[c(15)] <- plot_col[15] ## peritumor region 2 "#E377C2FF"
names(cluster_col) <- 0:(length(unique(dat.masked@meta.data$seurat_clusters_pca))-1)

#### 610*620
STutility::ST.FeaturePlot(dat.masked,
                          features = "seurat_clusters_pca",
                          split.labels = F,
                          ncol = 3,
                          pt.size = 1.9,
                          cols = cluster_col,
                          label.by = "labels") &
  labs(title = element_blank(),
       strip.text = element_blank())

#### [Figure 5B] UMAP
#### FeaturePlot for peritumor clusters

#### jpeg 700*600
Seurat::DimPlot(dat.masked,
                group.by = "seurat_clusters_pca",
                label = F,
                label.size = 8,
                reduction = "umap",
                cols = cluster_col,
                pt.size = 0.9,
                alpha = 0.9)

#### ==========================================================================
#### Figure 5C: Barplot of Peritumor Proportions
#### ==========================================================================

#### [Figure 5C] barplot
#### Visiualization of proportions of peritumors between conditions

#### Load spot annotation dataset
load("../../visium/dat.masked.spot.info0826.RData")

plot_cols <- c("#9467BDFF", "#E377C2FF", "gainsboro")

numb <- "peritumor"
unique(dat.masked@meta.data$labels)
dat.masked.subset <- dat.masked %>%
  SubsetSTData(spot_info == numb)

#### Create frequency table and process data
cluster_df <- table(dat.masked.subset@meta.data$condition,
                    dat.masked.subset@meta.data$seurat_clusters_pca) %>%
  as.data.frame() %>%
  mutate(Var2 = case_when(
    Var2 == "6" ~ "6",
    Var2 == "14" ~ "14",
    TRUE ~ "Others"
  )) %>%
  group_by(Var1, Var2) %>%
  summarise(Freq = sum(Freq)) %>%
  ungroup()

#### Ensure y-axis is ordered from NT to TREAT
cluster_df$Var1 <- factor(cluster_df$Var1, levels = c("TREAT", "NT"))

#### 400*400
ggplot(cluster_df,
       aes(x = Freq,,
           y = as.character(Var1),
           fill = Var2)) +
  geom_col(position = "fill",
           width = 0.6) +
  labs(x = "Proportion (%)",
       y = "",
       fill = "unbiased\nclustering",
       title = paste0(numb)) +
  scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_y_discrete(limits = levels(cluster_df$Var1)) +
  scale_fill_manual(breaks = c(6, 14, "Others"),
                    values = plot_cols) +
  theme_classic() +
  theme(text = element_text(size = 14,
                            color = "black"),
        axis.text = element_text(color = "black"),
        legend.title = element_text(size = 11.5),
        axis.title = element_text(size = 11.5, face = 1),
        axis.title.x = element_blank())





#### ==========================================================================
#### Figure 5DE: Functional Analysis
#### ==========================================================================

#### Load enrichment Data
EnrichR <- list(read.delim("../data/Archieve2/cluster6 all GO_Biological_Process_2023_table.txt", 
                           header = TRUE, stringsAsFactors = FALSE),
                read.delim("../data/Archieve2/cluster14 all GO_Biological_Process_2023_table.txt", 
                           header = TRUE, stringsAsFactors = FALSE))

names(EnrichR) <- c("cluster6", "cluster14")

#### Process enrichment Data
EnrichR <- lapply(EnrichR, function(df) {
  df[, ncol(df)] <- gsub(";", "/", df[, ncol(df)])
  df$OverlapRatio <- sapply(strsplit(df$Overlap, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2]))
  return(df)
})

#### Define selected categories
category_selected <- unique(c("Myelination (GO:0042552)",
                              "Choline Metabolic Process (GO:0019695)",
                              "Regulation Of Myelination (GO:0031641)",
                              "Regulation Of Oligodendrocyte Differentiation (GO:0048713)",
                              "Glial Cell Differentiation (GO:0010001)",
                              "Negative Regulation Of Oxidative Stress-Induced Cell Death (GO:1903202)",
                              "Positive Regulation Of Neurogenesis (GO:0050769)"))

#### Combine and filter enrichment data
EnrichR_combined <- map2_df(EnrichR, names(EnrichR), ~ .x %>%
                              filter(Term %in% category_selected) %>%
                              mutate(Term = factor(Term,
                                                   levels = Term[order(P.value, decreasing = TRUE)]),
                                     cluster = .y,
                                     ontology = "BP")
)

#### Ensure x-axis is ordered from cluster6 to cluster14
EnrichR_combined <- EnrichR_combined %>%
  mutate(cluster = factor(cluster, levels = c("cluster6", "cluster14")))

#### [Figure 5D] Dotplot
#### Visualization of -log10(Pvalue) enrichment of GO terms

#### 550*900
d1 <- ggplot(EnrichR_combined,
             aes(x = cluster,
                 y = Term)) +
  geom_point(aes(size = OverlapRatio,
                 fill = -log10(P.value)),
             shape = 21) + 
  scale_fill_gradientn(colors = rev(c("#E64B35FF", "#F39B7F", "#3C5488FF")),
                       name = "-log10(P.value)") +
  theme_classic() +
  theme(title = element_text(size = 10),
        plot.subtitle = element_text(face = "italic", size = 10),
        text = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black")) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 26)) +
  facet_grid(scales = "free_y", space = "free_y")+
  scale_x_discrete(limits = c("cluster6", "cluster14"))+
  scale_size_continuous(range = c(3, 12))
d1 


#### [Figure 5E] Chorddiagram
#### Visualization of relationships between genes and GO terms

#### Load gene expression data
res_df <- read.csv("../../visium/614_topGenes_pval0.01_avglog2FC1.csv",
                   row.names = 1)
head(res_df)

#### Process expression data with dotplot plotted before
integrated_df <- d1$data %>%
  .[, c("Term", "Genes")] %>%
  as.data.frame() %>%
  separate_longer_delim(data = ., cols = Genes, delim = "/") %>%
  mutate(Genes = tolower(Genes)) %>%
  left_join(., res_df %>%
              .[, c("gene", "avg_log2FC")] %>%
              mutate(gene = tolower(gene)),
            by = c("Genes" = "gene")) %>%
  mutate(Genes = str_to_title(Genes))
head(integrated_df)

#### Define color groups
group <- c(levels(integrated_df$Term),
           unique(integrated_df[order(integrated_df$avg_log2FC, decreasing = T),]$Genes))

# prepare data for the legends
uni.integrated_df <- integrated_df %>%
  arrange(desc(avg_log2FC)) %>%
  .[, c("Genes", "avg_log2FC")] %>%
  unique()

values <- uni.integrated_df$avg_log2FC
log_values <- log1p(values)  
normalized_values <- (log_values - min(log_values)) / (max(log_values) - min(log_values))
color_steps <- 100
color_palette <- colorRampPalette(brewer.pal(9, "Blues"))(color_steps)
matched_colors <- color_palette[round(normalized_values * (color_steps - 1)) + 1]

mycolors <- c(colorRampPalette(c("#FDF6B1", "#E377C2FF", "#9467BDFF", "#3B0B39"))(length(unique(integrated_df$Term))),
              c(matched_colors))

names(mycolors) <- group


#### plotting
#### edit  canvas size
circos.par(canvas.ylim = c(-1.7, 1.7),
           canvas.xlim = c(-0.5, 1.1),
           track.margin = c(0.01, 0.01),
           track.height = 0.05,
           start.degree = 90)

cd <- chordDiagram(integrated_df,
                   order = group,
                   grid.col = mycolors,
                   
                   ## plot only grid (no labels, no axis)
                   annotationTrack = "grid", 
                   preAllocateTracks = 2,
                   
                   ## adjust grid width and spacing
                   annotationTrackHeight = c(0.03, 0.01),
                   
                   scale = TRUE,
                   big.gap = 20,
                   
                   ## adjust height of all links
                   h.ratio = 0.8,
                   
                   ## transparency
                   transparency = 0.05
                   
)


#### Add labels to chord diagram
circos.track(track.index = 2, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter,
              CELL_META$ylim[1],
              CELL_META$sector.index[CELL_META$sector.index %in% integrated_df$Genes],
              facing = "reverse.clockwise",
              niceFacing = F,
              adj = c(1, 0.5),
              cex = 0.6
  )
}, bg.border = NA)

#### Add legends to chord diagram (GO term)
legend_GO <- Legend(title = "GO term",
                    labels = str_wrap(levels(integrated_df$Term),
                                      width = 26),
                    type = "point",
                    background = colorRampPalette(c("#FDF6B1", "#E377C2FF", "#9467BDFF", "#3B0B39"))(length(unique(integrated_df$Term))),
                    labels_gp = gpar(font = 1.5))

#### Add legends to chord diagram2 (avg_log2FC)
min.value <- round(min(as.numeric(uni.integrated_df$avg_log2FC)))
max.value <- round(max(as.numeric(uni.integrated_df$avg_log2FC)))
mid.value <- mean(c(min.value, max.value))

legend_breaks <- seq(min.value, max.value, length.out = 5)

if (max.value > 0 & min.value >= 0) {
  col_fun = colorRamp2(c(max.value, mid.value, min.value),
                       rev(colorRampPalette(brewer.pal(9, "Blues"))(3)))
} else if (max.value > 0 & min.value <= 0) {
  col_fun = colorRamp2(c(max.value, 0, min.value),
                       c("#DC0000FF", "white", "blue4"))
} else if (max.value <= 0 & min.value <= 0) {
  col_fun = colorRamp2(c(max.value, min.value),
                       c("white", "blue4"))
}

legend_FC <- Legend(title = "avg_log2FC",
                    col_fun = col_fun,
                    at = legend_breaks,
                    direction = "horizontal",
                    title_gp = gpar(font = 2, fontsize = 10),
                    labels_gp = gpar(font = 1, fontsize = 10),
                    legend_width = unit(5, "cm"))

h = dev.size()[2]
legend_list = packLegend(legend_FC,
                         legend_GO,
                         direction = "vertical")

#### jpeg 900*600
draw(legend_list, x = unit(0.97, "npc"), y = unit(0.07, "npc"), just = c("right", "bottom"))

#### Clear the circos plot
circos.clear()


#### ==========================================================================
#### Figure 5FG: Visualization of GO term enrichment on the H&E images
#### ==========================================================================

#### Load data
load("../../visium/dat.masked.RData")

EnrichR <- list(read.delim("/Users/hee/workspace/project/2024_GBM/github/paper/data/Archieve2/cluster6 all GO_Biological_Process_2023_table.txt",
                           header = TRUE, stringsAsFactors = FALSE),
                read.delim("/Users/hee/workspace/project/2024_GBM/github/paper/data/Archieve2/cluster14 all GO_Biological_Process_2023_table.txt",
                           header = TRUE, stringsAsFactors = FALSE))

names(EnrichR) <- c("cluster6", "cluster14")

#### Process enrichment Data
EnrichR <- lapply(EnrichR, function(df) {
  df[, ncol(df)] <- gsub(";", "/", df[, ncol(df)])
  df$OverlapRatio <- sapply(strsplit(df$Overlap, "/"), function(x) as.numeric(x[1]) / as.numeric(x[2]))
  return(df)
})

term_list <- unique(c("Myelination (GO:0042552)",
                      "Positive Regulation Of Neurogenesis (GO:0050769)"))

EnrichR_combined <- map2_df(EnrichR, names(EnrichR), ~ .x %>%
                              filter(Term %in% term_list) %>%
                              mutate(Term = factor(Term,
                                                   levels = Term[order(P.value, decreasing = TRUE)]),
                                     cluster = .y,
                                     ontology = "BP")
) %>%
  mutate(Genes = str_to_title(Genes))

EnrichR_combined <- EnrichR_combined %>%
  mutate(cluster = factor(cluster, levels = c("cluster6", "cluster14")))


term_subset <- term_list[1]

for (i in term_subset){
  markers <- EnrichR_combined%>%
    dplyr::filter(., .$cluster == "cluster14") %>%
    .[.$Term == term,] %>%
    .$Genes %>%
    strsplit(split = "/") %>%
    unlist
  
  create_plot_with_markers <- function(dat.masked, sample_numb, sample_name, marker_genes, legend = TRUE) {
    
    ## Extract metadata and calculate the average expression of the marker genes
    gg <- cbind(dat.masked[[]], GetStaffli(dat.masked)@meta.data)
    gene_data <- FetchData(dat.masked, vars = marker_genes)
    
    if (ncol(gene_data) > 1) {
      gg$marker_expr <- rowMeans(gene_data, na.rm = TRUE) 
    } else {
      gg$marker_expr <- gene_data[[1]]
    }
    
    gg_min <- min(gg$marker_expr, na.rm = TRUE)
    gg_max <- max(gg$marker_expr, na.rm = TRUE)
    
    gg <- subset(gg, labels == sample_name) %>%
      group_by(seurat_clusters_pca) %>%
      mutate(alpha = (marker_expr - gg_min) / (gg_max - gg_min))
    
    dims <- GetStaffli(dat.masked)@dims[[sample_numb]]
    limits_list <- list("1" = c(x_start = 1, y_start = 1, x_end = dims$width, y_end = dims$height))
    
    im <- GetStaffli(dat.masked)@rasterlists$processed[[sample_numb]]
    sf <- nrow(im) / dims$height
    im <- im[limits_list[[1]]["y_start"]:limits_list[[1]]["y_end"] * sf,
             limits_list[[1]]["x_start"]:limits_list[[1]]["x_end"] * sf]
    g <- grid::rasterGrob(im, width = unit(1, "npc"), height = unit(1, "npc"), interpolate = TRUE)
    
    p <- ggplot() +
      labs(subtitle = sample_name) +
      geom_point(data = gg,
                 aes(warped_x, dims$height - warped_y,
                     fill = marker_expr, alpha = alpha),
                 size = 2,
                 shape = 21, stroke = 0) +
      theme_void() +
      theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
            legend.title = element_blank()) +  ## Add margin for spacing
      scale_x_continuous(expand = c(0, 0),
                         limits = c(limits_list[[1]]["x_start"],
                                    limits_list[[1]]["x_end"])) +
      scale_alpha_continuous(range = c(0.1, 1), guide = "none") +
      scale_y_continuous(expand = c(0, 0),
                         limits = c(dims$height - limits_list[[1]]["y_end"],
                                    dims$height - limits_list[[1]]["y_start"])) +
      scale_fill_gradientn(colours = viridis::viridis(n = 11),
                           limits = c(gg_min, gg_max)) 
    
    ## Remove legend if not required
    if (!legend) {
      p <- p + theme(legend.position = "none")
    }
    
    return(p)
  }
  
  ## Function to extract the legend from one plot
  extract_legend <- function(plot) {
    legend <- cowplot::get_legend(plot + theme(legend.position = "right"))
    return(legend)
  }
  
  #E Now generate plots and extract the legend from the first plot
  p1 <- create_plot_with_markers(dat.masked, sample_numb = 1, sample_name = "NT1", marker_genes = markers, legend = TRUE)
  p2 <- create_plot_with_markers(dat.masked, sample_numb = 2, sample_name = "NT5", marker_genes = markers, legend = FALSE)
  p3 <- create_plot_with_markers(dat.masked, sample_numb = 3, sample_name = "NT2", marker_genes = markers, legend = FALSE)
  p4 <- create_plot_with_markers(dat.masked, sample_numb = 4, sample_name = "TREAT5", marker_genes = markers, legend = FALSE)
  p5 <- create_plot_with_markers(dat.masked, sample_numb = 5, sample_name = "TREAT8", marker_genes = markers, legend = FALSE)
  p6 <- create_plot_with_markers(dat.masked, sample_numb = 6, sample_name = "TREAT4", marker_genes = markers, legend = FALSE)
  
  ## Extract the legend
  legend <- extract_legend(p1)
  
  ## Combine all plots without legends and add the legend on the right with added spacing
  final_plot <- cowplot::plot_grid(
    cowplot::plot_grid(p1 + theme(legend.position = "none"),
                       p2, p3, p4, p5, p6, ncol = 3, align = "hv",
                       rel_heights = c(1, 1)),
    legend, 
    rel_widths = c(4, 0.5),  ## Adjust the width of the plots and legend
    hjust = 0.5  ## Center the legend horizontally
  )
  
  p <- final_plot +
    plot_annotation(title = term)
  
}

#### jpeg 610*640
p


#### ==========================================================================
#### Figure 5HIJK: Visualization of specific genes
#### ==========================================================================

#### Load data
load("../../visium/dat.masked.RData")

#### Define markers
marker <- "Mal"
marker <- "Ptprd"

#### [Figure 5HJ] Featureplot
#### Visualization of a specific genes on seurat clusters

heat.colors <- c("gainsboro", "lemonchiffon", "orange", "darkorange2", "brown4")

p1 <- FeaturePlot(dat.masked, features = marker) + 
  scale_color_gradientn(colors = heat.colors,
                        labels = scales::number_format(accuracy = 0.1)) +
  theme(legend.position = "right") 

p2 <- ST.FeaturePlot(dat.masked,
                     features = marker,
                     ncol = 3,
                     cols = heat.colors,
                     grid.ncol = 1,
                     pt.size = 1.2,
                     show.sb = F) +
  theme(legend.position = "none")

#### 900*450
combined_plot <- cowplot::plot_grid(p1, p2, ncol = 2, rel_widths = c(1.3, 1))
combined_plot


#### [Figure 5IK] Boxplot
#### Visualization of a specific genes on seurat clusters

#### Define markers
marker <- "Mal"
marker <- "Ptprd"

plot_cols <- c("#4682B4", "#D62728FF")

gg <- cbind(dat.masked[[]],
            FetchData(dat.masked,
                      vars = marker)) %>%
  reshape2::melt(measure.vars = marker)
y_max <- max(gg$value, na.rm = TRUE)
y_expansion <- y_max * 0.3

p_markers <- cbind(dat.masked[[]],
                   FetchData(dat.masked,
                             vars = marker)) %>%
  reshape2::melt(measure.vars = marker) %>%
  filter(seurat_clusters_pca %in% c(3, 6, 7, 14)) %>% 
  ggplot(aes(condition, value, fill = condition)) +
  geom_boxplot(outlier.shape = NA) +
  theme_classic() +
  geom_jitter(position = position_jitter(width = 0.2),
              size = 0.5,
              alpha = 0.6) +
  geom_signif(comparisons = list(c("NT", "TREAT")),
              test = "wilcox.test",
              y_position = c(y_max + y_expansion) * 0.85,
              textsize = 4,
              map_signif_level = function(p) sprintf("%.20f", p)) +
  scale_fill_manual(breaks = c("NT", "TREAT"),
                    values = plot_cols) +
  facet_wrap(~seurat_clusters_pca, ncol = 11) +
  theme(panel.background = element_rect(fill = "white"),
        panel.grid = element_line(linetype = "longdash", colour = "lightgrey"),
        strip.text = element_text(size = 14, colour = "black"),
        axis.text.x = element_text(size = 12, colour = "black", angle = 90),
        axis.text.y = element_text(size = 14, colour = "black"),
        axis.title = element_text(size = 14, colour = "black"),
        legend.position = "bottom") +
  labs(y = "Norm. Expr.", x = "",
       title = marker) +
  scale_y_continuous(labels = scales::number_format(accuracy = 0.1),
                     limits = c(NA, y_max + y_expansion))

#### 600*450
p_markers
