#### ==========================================================================
#### Spatial Transcriptomics Analysis Pipeline
#### ==========================================================================
#### Author: [Seunghee Jeong]
#### Date: [2025.02.05]
#### Description: This script processes and analyzes spatial transcriptomics
####              data for treated (TREAT) and Vehicle mouse brain samples.
#### ==========================================================================


#### ==========================================================================
#### Load Necessary Packages
#### ==========================================================================
#### Install necessary package manager
pkg <- c("BiocManager", "Seurat", "cowplot", "viridis", "dplyr", "purrr")
Biopkg <- c("")

## Function to install and load packages
install_and_load <- function(package_list) {
  new_packages <- package_list[!(package_list %in% installed.packages()[,"Package"])]
  if (length(new_packages) > 0) {
    install.packages(new_packages)
  }
  sapply(package_list, require, character.only = TRUE)
}

install_and_load(c(pkg, Biopkg))

#### Install and load STUtility
if (!requireNamespace("STUtility", quietly = TRUE)) {
  remotes::install_github("jbergenstrahle/STUtility")
}
library(STutility) 

#### ==========================================================================
#### Supple Figure 20
#### ==========================================================================

#### Load dataset
load("../files/dat.masked.RData")
load("../files/dat.orig.RData")

#### [Supple Figure 20A] histogram + featureplot
#### Visualization of discarded regions that have low quality

MIN_COUNT_RNA <- 500
MIN_FEATURE_RNA <- 500

#### Confirm image alignment (Not printing)
STutility::ImagePlot(dat.subset,
                     method = "raster",
                     annotate = T,
                     ncol = 3)

#### Plot histogram
p1 <- dat %>%
  .[[]] %>%
  mutate(labels = factor(labels, levels = c("Vehicle1", "Vehicle2",
                                            "Vehicle5", "HAGA4",
                                            "HAGA5", "HAGA8"))) %>%
  mutate(condition = factor(condition, levels = c("Vehicle", "HAGA"))) %>%
  ggplot(aes(nFeature_RNA,
             fill = ifelse(nCount_RNA < MIN_COUNT_RNA &
                             nFeature_RNA < MIN_FEATURE_RNA,
                           "discard", "keep"))) +
  geom_histogram(binwidth = 100) +
  geom_vline(xintercept = MIN_COUNT_RNA, linetype = "longdash") +
  facet_grid(condition~labels, scales = "free") +
  labs(fill = "", x = "Unique genes", y = "Count") +
  scale_x_continuous(breaks = c(0, 500, 2000, 4000, 6000),
                     minor_breaks = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), 
        axis.text = element_text(colour = "black"),
        axis.title = element_text(colour = "black"),
        strip.text = element_text(colour = "black"),
        legend.text = element_text(colour = "black"))

#### jpeg 1200*400
p1

#### Define filter for discarded spots
dat$filter <- ifelse(dat$nFeature_RNA < MIN_FEATURE_RNA &
                              dat$nCount_RNA < MIN_COUNT_RNA,
                            "discard", "keep")

#### FeaturePlot for discarded regions
#### 1200*340
STutility::ST.FeaturePlot(dat,
                          features = "filter",
                          show.sb = FALSE,
                          pt.size = 1.6,
                          ncol = 6,
                          cols = c("keep" = "lightgray", "discard" = "red")) +
  theme(strip.text = element_blank(), plot.title = element_blank(),
        legend.title = element_blank()) &
  guides(fill = guide_legend(override.aes = list(size = 4)))


#### [Supple Figure 20B] Featureplot
#### Featureplot of unique genes

#### 610*620
ST.FeaturePlot(dat.masked,
               features = "nFeature_RNA",
               ncol = 3,
               label.by = "labels",
               pt.size = 1.9,
               show.sb = FALSE,
               cols = magma(n = 11, direction = -1)) &
  theme(plot.title = element_blank(),
        legend.text = element_text(colour = "black"),
        legend.title = element_text(colour = "black", vjust = 1),
        strip.text = element_text(colour = "black")) &
  labs(fill = "unique genes")


#### [Supple Figure 20C] Violinplot
#### Violinplot of unique genes and UMI counts

#### 400*300
dat.masked[[]] %>%
  dplyr::mutate(`Unique genes` = nFeature_RNA,
                `UMI counts` = nCount_RNA) %>%
  reshape2::melt(measure.vars = c("Unique genes",
                                  "UMI counts")) %>%
  ggplot(aes(condition, value, fill = condition)) +
  geom_violin(scale = "width", alpha = 0.7) +
  geom_boxplot(width = 0.3) +
  scale_y_log10() +
  theme_classic() +
  facet_wrap(~variable) +
  theme(axis.title = element_blank(),
        # axis.text.x = element_blank(),
        axis.ticks.x = element_blank(), 
        legend.position = "none",
        axis.text.y = element_text(colour = "black"))


#### [Supple Figure 20D] Violinplot
#### nFeature, nCount of the data in individual samples

features <- c("nFeature_RNA", "nCount_RNA")

plots <- purrr::map(features, ~ VlnPlot(dat.masked,
                                        features = .x,
                                        group.by = "labels",
                                        cols = c("#4682B4", "#AEC7E8FF", "#9467BDFF",
                                                 "#D62728FF", "#F89C74", "#FF7F0EFF"),
                                        pt.size = 0) +  
                      geom_jitter(alpha = 0.2, size = 0.3) +
                      theme(legend.position = "none"))

#### 600*400
plot_grid(plotlist = plots, ncol = 2)

features <- c("nFeature_SCT", "nCount_SCT")

plots <- purrr::map(features, ~ VlnPlot(dat.masked,
                                        features = .x,
                                        group.by = "labels",
                                        cols = c("#4682B4", "#AEC7E8FF", "#9467BDFF",
                                                 "#D62728FF", "#F89C74", "#FF7F0EFF"),
                                        pt.size = 0) +  
                      geom_jitter(alpha = 0.2, size = 0.3) +
                      theme(legend.position = "none"))

#### 600*400
plot_grid(plotlist = plots, ncol = 2)




#### ==========================================================================
#### Supple Figure 21
#### ==========================================================================

#### UMAP for labels

#### jpeg 700*600
DimPlot(dat.masked,
        group.by = "labels",
        cols = c("#4682B4", "#AEC7E8FF", "#9467BDFF",
                 "#D62728FF", "#F89C74", "#FF7F0EFF"),
        pt.size = 0.9,
        alpha = 0.9)


#### ==========================================================================
#### Supple Figure 22, 23, 25
#### ==========================================================================

#### [Supple Figure 22, 23, 25] Featureplot
#### Visualization of ditribution of specific genes

markers <- "Cdc34"
markers <- "Ube2c"
markers <- "Zfp36l2"
markers <- "Bcl9l"
markers <- "Dvl3"
markers <- "Arhgef1"
markers <- "Rhog"
markers <- "Arg1"
markers <- "Mafb"

#### Define colors
heat.colors <- c("gainsboro", "lemonchiffon", "orange", "darkorange2", "brown4")

#### Subset data for selected clusters
dat.subset <- dat.masked %>%
  SubsetSTData(seurat_clusters_pca %in% c(0, 1))

#### Generate Featureplots
p1 <- FeaturePlot(dat.subset, features = markers) + 
  scale_color_gradientn(colors = heat.colors,
                        labels = scales::number_format(accuracy = 0.1)) +
  theme(legend.position = "right")

p2 <- ST.FeaturePlot(dat.subset,
                     features = markers,
                     ncol = 3,
                     cols = heat.colors,
                     grid.ncol = 1,
                     pt.size = 1.2,
                     show.sb = T) + 
  theme(legend.position = "none")

#### jpeg 900*450
combined_plot <- cowplot::plot_grid(p1, p2, ncol = 2, rel_widths = c(1.3, 1))
combined_plot


#### [Supple Figure 22, 23, 25] Violinplot
#### Visualization of ditribution of specific genes

#### Define order of samples
sample_order <- c("NT1", "NT2", "NT5", "TREAT4", "TREAT5", "TREAT8")
sample_order <- factor(sample_order, levels = sample_order, order = T)

#### Define colors
plot_cols <- c("NT" = "#4682B4",
              "TREAT" = "#D62728FF")

#### Select a cluster that interested in 
cluster_of_interest <- "0"

#### Subset the data for the specific cluster
subset_data <- dat.masked %>%
  STutility::SubsetSTData(seurat_clusters == cluster_of_interest)

#### Fetch the marker data
marker_data <- FetchData(subset_data, vars = markers)

#### Combine the subset data and marker data
combined_data <- cbind(subset_data[[]], marker_data)

#### Reshape the data for ggplot2
melted_data <- reshape2::melt(combined_data, measure.vars = markers)

#### Generate the violin plot
main_plot <- ggplot(melted_data, aes(labels, value, fill = condition)) +
  geom_violin(scale = "width") +
  theme_classic() +
  scale_fill_manual(values = plot_cols, drop = FALSE) +
  scale_x_discrete(limits = levels(sample_order)) +
  scale_y_continuous(labels = scales::number_format(accuracy = 0.1)) +
  facet_wrap(~seurat_clusters, ncol = 5) +
  labs(title = markers) +
  theme(panel.background = element_rect(fill = "white"),
        panel.grid = element_line(linetype = "longdash", colour = "lightgrey"),
        strip.text = element_text(size = 14, colour = "black"),
        legend.position = "none",
        axis.text.x = element_text(size = 12, colour = "black", angle = 90),
        axis.text.y = element_text(size = 14, colour = "black"),
        axis.title = element_text(size = 12, colour = "black")) +
  labs(y = "Norm. Expr.", x = "")

legend_plot <- ggplot(data.frame(Var2 = names(plot_cols), value = 1), aes(fill = Var2)) +
  geom_bar(aes(x = 1, y = value), stat = "identity") +
  theme_classic() +
  scale_fill_manual(values = plot_cols, drop = FALSE) +
  guides(fill = guide_legend(title = "condition")) +
  theme_void() +
  theme(legend.text = element_text(size = 12),
        legend.title = element_text(size = 12))

#### jpeg 800*300
final_plot <- cowplot::plot_grid(main_plot, get_legend(legend_plot), ncol = 2, rel_widths = c(4, 1))
final_plot



#### ==========================================================================
#### Supple Figure 24 : Cellular composition analysis
#### ==========================================================================

#### Load data
dt <- read.csv("../../visium/dat.subset.singleR.ImmGenData.wilcox.csv")

dt.sum <- dt[,c("labels", "seurat_clusters_pca", "cell_deconvolution")] %>%
  group_by(cell_deconvolution, seurat_clusters_pca) %>%
  summarise(Freq = n()) %>%
  mutate(seurat_clusters_pca = ifelse(seurat_clusters_pca == 0, "Cluster 0", "Cluster 1")) %>%
  mutate(seurat_clusters_pca = factor(seurat_clusters_pca,
                         levels = c("Cluster 1", "Cluster 0"))) %>%
  as.data.frame()


#### Summarize Macrophage Composition
dt.sum.macro <- dt.sum %>%
  mutate(cell_type = ifelse(cell_deconvolution == "Macrophages", 
                            "Macrophages", "Others")) %>%
  group_by(seurat_clusters_pca, cell_type) %>%
  summarise(Freq = sum(Freq)) %>%
  ungroup()

#### jpeg 600*300
ggplot(dt.sum.macro,
       aes(x = seurat_clusters_pca,
           y = Freq,
           fill = cell_type)) +
  scale_y_discrete(limits = rev(levels(dt.sum$seurat_clusters_pca))) +
  scale_fill_manual(values = c("#D62728FF", "grey")) + 
  geom_col(position = "fill",
           width = 0.6) +
  labs(y = "Proportion (%)") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  geom_text(data = dt.sum.macro %>%
              group_by(seurat_clusters_pca) %>% 
              mutate(Percent = Freq / sum(Freq)) %>%
              filter(Percent > 0),
            aes(label = scales::percent(Percent, accuracy = 1)),
            position = position_fill(vjust = 0.5), 
            size = 5,
            color = "black",
            fontface = "bold") +
  theme_classic() +
  theme(axis.text = element_text(color = "black"),
        axis.title.y = element_blank(),
        legend.title = element_blank(),
        text = element_text(size = 17,
                            face = "bold")) +
  coord_flip()





